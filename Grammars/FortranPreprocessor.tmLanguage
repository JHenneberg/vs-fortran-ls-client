<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>comment</key>
    <string>Adds a number of preprocessor rules to Fortran grammar.</string>
    <key>scopeName</key>
    <string>source.fortran.preprocessor</string>
    <key>fileTypes</key>
    <array/>
    <key>injectionSelector</key>
    <string>source.fortran - ( string | comment )</string>
    <key>patterns</key>
    <array>
      <dict>
        <key>name</key>
        <string>meta.preprocessor</string>
        <key>begin</key>
        <string>^\s*(#)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.preprocessor.indicator.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\n</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#if-construct</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#statements</string>
          </dict>
        </array>
      </dict>
    </array>
    <key>repository</key>
    <dict>
      <key>comments</key>
      <dict>
        <key>name</key>
        <string>comment.preprocessor</string>
        <key>begin</key>
        <string>/\*</string>
        <key>end</key>
        <string>\*/</string>
      </dict>
      <key>constants</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#numeric-constant</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#string-constant</string>
          </dict>
        </array>
      </dict>
      <key>numeric-constant</key>
      <dict>
        <key>comment</key>
        <string>Numeric constants</string>
        <key>name</key>
        <string>constant.numeric.fortran</string>
        <key>match</key>
        <string>(?ix)[\+\-]?(\b\d+\.?\d*|\.\d+) (_\w+|d[\+\-]?\d+|e[\+\-]?\d+(_\w+)?)?(?![a-z_])</string>
      </dict>
      <key>string-constant</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>Double quote string</string>
            <key>name</key>
            <string>string.quoted.double.include.preprocessor.fortran</string>
            <key>begin</key>
            <string>"</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.preprocessor.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>"</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.preprocessor.fortran</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>comment</key>
            <string>Single quote string</string>
            <key>name</key>
            <string>string.quoted.single.include.preprocessor.fortran</string>
            <key>begin</key>
            <string>'</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.preprocessor.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>'</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.preprocessor.fortran</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>if-construct</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(?i)\G\s*\b(if)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.preprocessor.if.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\n)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#comments</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#numeric-constant</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#logical-operators</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#defined-function</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?i)\G\s*\b(ifdef)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.preprocessor.ifdef.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\n)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#comments</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#numeric-constant</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#logical-operators</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?i)\G\s*\b(ifndef)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.preprocessor.ifndef.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\n)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#comments</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#numeric-constant</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#logical-operators</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?i)\G\s*\b(else)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.preprocessor.else.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\n)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#comments</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#numeric-constant</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?i)\G\s*\b(elif)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.preprocessor.elif.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\n)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#comments</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#numeric-constant</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#logical-operators</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#defined-function</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?i)\G\s*\b(endif)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.preprocessor.endif.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\n)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#comments</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>defined-function</key>
      <dict>
        <key>match</key>
        <string>(?i)\b(defined)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.define.preprocessor.fortran</string>
          </dict>
        </dict>
      </dict>
      <key>operators</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#assignment-operator</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#line-continuation-operator</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#logical-operators</string>
          </dict>
        </array>
      </dict>
      <key>assignment-operator</key>
      <dict>
        <key>name</key>
        <string>keyword.operator.assignment.preprocessor.fortran</string>
        <key>match</key>
        <string>(?&lt;!\=)(\=)(?!\=)</string>
      </dict>
      <key>line-continuation-operator</key>
      <dict>
        <key>begin</key>
        <string>\s*(\\)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.line-continuation.preprocessor.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?i)^</string>
      </dict>
      <key>logical-operators</key>
      <dict>
        <key>name</key>
        <string>keyword.operator.logical.preprocessor.fortran</string>
        <key>match</key>
        <string>&amp;&amp;</string>
      </dict>
      <key>statements</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#define-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#error-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#include-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#pragma-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#undefine-statement</string>
          </dict>
        </array>
      </dict>
      <key>define-statement</key>
      <dict>
        <key>begin</key>
        <string>(?i)\G\s*\b(define)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.define.preprocessor.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=\n)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comments</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#string-constant</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#assignment-operator</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#line-continuation-operator</string>
          </dict>
        </array>
      </dict>
      <key>error-statement</key>
      <dict>
        <key>begin</key>
        <string>(?i)\G\s*(error)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.error.preprocessor.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=\n)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comments</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#string-constant</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#line-continuation-operator</string>
          </dict>
        </array>
      </dict>
      <key>include-statement</key>
      <dict>
        <key>begin</key>
        <string>(?i)\G\s*(include)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.include.preprocessor.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=\n)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comments</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#string-constant</string>
          </dict>
          <dict>
            <key>name</key>
            <string>string.quoted.other.lt-gt.include.preprocessor.fortran</string>
            <key>begin</key>
            <string>&lt;</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.preprocessor.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>&gt;</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.preprocessor.fortran</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>include</key>
            <string>#line-continuation-operator</string>
          </dict>
        </array>
      </dict>
      <key>pragma-statement</key>
      <dict>
        <key>begin</key>
        <string>(?i)\G\s*\b(pragma)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.pragma.preprocessor.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=\n)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comments</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#string-constant</string>
          </dict>
        </array>
      </dict>
      <key>undefine-statement</key>
      <dict>
        <key>begin</key>
        <string>(?i)\G\s*\b(undef)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.undef.preprocessor.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=\n)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comments</string>
          </dict>
        </array>
      </dict>
    </dict>
  </dict>
</plist>