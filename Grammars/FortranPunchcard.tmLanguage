<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>comment</key>
    <string>?i: has to be added everywhere because fortran is case insensitive; NB: order of matching matters</string>
    <key>name</key>
    <string>Fortran - Punchcard</string>
    <key>scopeName</key>
    <string>source.fortran.punchcard</string>
    <key>fileTypes</key>
    <array/>
    <key>patterns</key>
    <array>
      <dict>
        <key>include</key>
        <string>#comments</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#constants</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#operators</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#Fortran-definitions</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#type-specifications</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#type-attributes</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#control-constructs</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#control-statements</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#intrinsic-functions</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#data-type-statements</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#IO-statements</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#parentheses</string>
      </dict>
    </array>
    <key>repository</key>
    <dict>
      <key>comments</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>^[Cc\*]</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\n)</string>
            <key>name</key>
            <string>comment.line.c.fortran</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>match</key>
                <string>\\\s*\n</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>operators</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>Arithmetic operators.</string>
            <key>name</key>
            <string>keyword.operator.fortran</string>
            <key>match</key>
            <string>((?&lt;!\=)\=(?!\=)|\-|\+|\/|\*)</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Logical operators.</string>
            <key>name</key>
            <string>keyword.operator.logical.fortran</string>
            <key>match</key>
            <string>(?ix)(\.and\.|\.or\.|\.eq\.|\.eqv\.|\.lt\.|\.le\. |\.gt\.|\.ge\.|\.ne\.|\.not\.|\.neqv\.)</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Misc operators.</string>
            <key>name</key>
            <string>keyword.operator.fortran</string>
            <key>match</key>
            <string>(\/\/|::)</string>
          </dict>
        </array>
      </dict>
      <key>constants</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>Logical constants</string>
            <key>name</key>
            <string>constant.language.fortran</string>
            <key>match</key>
            <string>(?i)\.(true|false)\.</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Numeric constants</string>
            <key>name</key>
            <string>constant.numeric.fortran</string>
            <key>match</key>
            <string>(?ix)[\+\-]?\b(\d+\.?\d*|\.\d+)(d[\+\-]?\d+|e[\+\-]?\d+(_\w+)?)?(?![a-z_])</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>String</string>
            <key>applyEndPatternLast</key>
            <integer>1</integer>
            <key>begin</key>
            <string>'</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>'</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.fortran</string>
              </dict>
            </dict>
            <key>name</key>
            <string>string.quoted.single.fortran</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>match</key>
                <string>''</string>
                <key>name</key>
                <string>constant.character.escape.apostrophe.fortran</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>comment</key>
            <string>String</string>
            <key>applyEndPatternLast</key>
            <integer>1</integer>
            <key>begin</key>
            <string>"</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>"</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.fortran</string>
              </dict>
            </dict>
            <key>name</key>
            <string>string.quoted.double.fortran</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>match</key>
                <string>""</string>
                <key>name</key>
                <string>constant.character.escape.quote.fortran</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>Fortran-definitions</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#block-data-definition</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#function-definition</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#program-definition</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#subroutine-definition</string>
          </dict>
        </array>
      </dict>
      <key>program-definition</key>
      <dict>
        <key>comment</key>
        <string>Program definition construct</string>
        <key>name</key>
        <string>meta.program.fortran</string>
        <key>begin</key>
        <string>(?i)(?:^|(?&lt;=;))\s*\b(program)\b\s+([a-z]\w*)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.program.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?i)^\s*(end)(?:\s*(\1)(\s+\2)?\b)?\s*([^;!\n]+)?</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.fortran</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>keyword.control.program.fortran</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>invalid.error.fortran</string>
          </dict>
        </dict>
        <key>applyEndPatternLast</key>
        <integer>1</integer>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>$self</string>
          </dict>
        </array>
      </dict>
      <key>block-data-definition</key>
      <dict>
        <key>contentName</key>
        <string>meta.block-data.fortran</string>
        <key>begin</key>
        <string>(?i)(?:^|\b(?&lt;!end)\s)\s*\b(block\s*data)\b\s+([a-z]\w*)?</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.block-data.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?i)^\s*(end)(?:\s*(\1)(\s+\2)?\b)?\s*([^;!\n]+)?</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.end.fortran</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>keyword.control.block-data.fortran</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>invalid.error.fortran</string>
          </dict>
        </dict>
        <key>applyEndPatternLast</key>
        <integer>1</integer>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>$self</string>
          </dict>
        </array>
      </dict>
      <key>function-definition</key>
      <dict>
        <key>comment</key>
        <string>Function definition construct</string>
        <key>name</key>
        <string>meta.function.fortran</string>
        <key>begin</key>
        <string>(?i)(?:^|(?&lt;=;)|\b(?&lt;!end)\s)\s*\b(function)\b\s+([a-z]\w*)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.function.fortran</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.function.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?i)^\s*(end)(?:\s*(\1)(\s+\2)?)?\b\s*([^;!\n]+)?</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.end.fortran</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>storage.type.function.fortran</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>entity.name.function.fortran</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>invalid.error.fortran</string>
          </dict>
        </dict>
        <key>applyEndPatternLast</key>
        <integer>1</integer>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>Rest of the first line in function construct.</string>
            <key>name</key>
            <string>meta.first-line.function.fortran</string>
            <key>begin</key>
            <string>\G(?!\s*[;!\n])</string>
            <key>end</key>
            <string>(?=[;!\n])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#dummy-variable-list</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>$self</string>
          </dict>
        </array>
      </dict>
      <key>subroutine-definition</key>
      <dict>
        <key>name</key>
        <string>meta.subroutine.fortran</string>
        <key>begin</key>
        <string>(?i)(?:^|(?&lt;=;)|\b(?&lt;!end)\s)\s*\b(subroutine)\b\s+([a-z]\w*)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.function.fortran</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.function.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?i)^\s*(end)(?:\s*(\1)(\s+\2)?\b)?\s*([^;!\n]+)?</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.end.fortran</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>storage.type.function.fortran</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>entity.name.function.fortran</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>invalid.error.fortran</string>
          </dict>
        </dict>
        <key>applyEndPatternLast</key>
        <integer>1</integer>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>Rest of the first line in subroutine construct.</string>
            <key>name</key>
            <string>meta.first-line.subroutine.fortran</string>
            <key>begin</key>
            <string>\G(?!\s*[;!\n])</string>
            <key>end</key>
            <string>(?=[;!\n])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#dummy-variable-list</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>$self</string>
          </dict>
        </array>
      </dict>
      <key>type-specifications</key>
      <dict>
        <key>name</key>
        <string>meta.specification.fortran</string>
        <key>begin</key>
        <string>(?ix)(?:^|\G|(?&lt;=[;a-z]))\s*\b(character|complex|double\s+precision |integer|logical|real)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?i)(?=[a-z\);!\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>$self</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>\G\(</string>
            <key>end</key>
            <string>\)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#procedure-call-dummy-variable</string>
              </dict>
              <dict>
                <key>include</key>
                <string>$self</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?=,)</string>
            <key>end</key>
            <string>(?=::|[;!\n])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>$self</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>type-attributes</key>
      <dict>
        <key>comment</key>
        <string>data type attributes</string>
        <key>name</key>
        <string>storage.modifier.fortran</string>
        <key>match</key>
        <string>(?i)\b(common|data|dimension|equivalence|external|intrinsic|parameter|save)\b</string>
      </dict>
      <key>control-constructs</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#do-construct</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#if-construct</string>
          </dict>
        </array>
      </dict>
      <key>do-construct</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta.do.labeled.fortran</string>
            <key>begin</key>
            <string>(?i)(?:^|(?&lt;=\d))\s*(do)\s+(\d{1,5})\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.do.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>constant.numeric.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?i)^(?=\s*\2\b)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>$self</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>match</key>
            <string>(?i)(?:^|(?&lt;=\d))\s*\b(do)\b(?=\s*[;!\n])</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.do.fortran</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>if-construct</key>
      <dict>
        <key>contentName</key>
        <string>meta.if.fortran</string>
        <key>begin</key>
        <string>(?i)(?:^|\G(?&lt;=:)|(?&lt;=;))\s*(if)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.if.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;!\G)(?!\s*&amp;)</string>
        <key>applyEndPatternLast</key>
        <integer>1</integer>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#parentheses</string>
          </dict>
          <dict>
            <key>contentName</key>
            <string>meta.then.fortran</string>
            <key>begin</key>
            <string>(?i)\s*\b(then)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.then.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?i)(?:^|(?&lt;=;))\s*(end\s*if)\b</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.endif.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>begin</key>
                <string>(?i)(?:^|(?&lt;=;))\s*(else\s*if)\b</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.control.elseif.fortran</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=[;!\n])</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#parentheses</string>
                  </dict>
                  <dict>
                    <key>match</key>
                    <string>\s*\b(then)\b</string>
                    <key>captures</key>
                    <dict>
                      <key>1</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.control.then.fortran</string>
                      </dict>
                    </dict>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>begin</key>
                <string>(?i)(?:^|(?&lt;=;))\s*(else)\b(?!\s*if\b)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.control.else.fortran</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?i)(?=\s*end\s*if\b)</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>$self</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>include</key>
                <string>$self</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>intrinsic-functions</key>
      <dict>
        <key>comment</key>
        <string>Intrinsic functions introduced in the Fortran 1977 standard.</string>
        <key>begin</key>
        <string>(?ix)\b([icd]?abs|acos|[ad]int|[ad]nint|aimag|amax[01]| amin[01]|d?asin|d?atan|d?atan2|char|conjg|[cd]?cos|d?cosh|cmplx|dble| i?dim|dmax1|dmin1|dprod|[cd]?exp|float|ichar|idint|ifix|index|int|len| lge|lgt|lle|llt|[acd]?log|[ad]?log10|max[01]?|min[01]?|[ad]?mod| (id)?nint|real|[di]?sign|[cd]?sin|d?sinh|sngl|[cd]?sqrt|d?tan|d?tanh)\s*\(</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.function.intrinsic.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#procedure-call-dummy-variable</string>
          </dict>
          <dict>
            <key>include</key>
            <string>$self</string>
          </dict>
        </array>
      </dict>
      <key>control-statements</key>
      <dict>
        <key>comment</key>
        <string>Statements controling the flow of the program</string>
        <key>name</key>
        <string>keyword.control.fortran</string>
        <key>match</key>
        <string>(?i)\b(assign|call|contains|continue|entry|go\s*to|pause|return|stop|to)\b</string>
      </dict>
      <key>data-type-statements</key>
      <dict>
        <key>comment</key>
        <string>data type attributes</string>
        <key>name</key>
        <string>storage.modifier.fortran</string>
        <key>match</key>
        <string>(?i)\b(implicit\s*none|implicit)\b</string>
      </dict>
      <key>IO-statements</key>
      <dict>
        <key>comment</key>
        <string>IO statements introduced in the Fortran 1977 standard.</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(?ix)\b(backspace|close|format|endfile|inquire|open| read|rewind|write)\s*\(</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.IO.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(\)|(?=\n))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#procedure-call-dummy-variable</string>
              </dict>
              <dict>
                <key>include</key>
                <string>$self</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>comment</key>
            <string>format and print statement.</string>
            <key>match</key>
            <string>(?i)\b(format|print|read)\b</string>
            <key>name</key>
            <string>keyword.control.IO.fortran</string>
          </dict>
        </array>
      </dict>
      <key>dummy-variable-list</key>
      <dict>
        <key>begin</key>
        <string>\G\s*(\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.parameters.begin.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(\)|(?=\n))</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.parameters.end.fortran</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>dummy variable</string>
            <key>match</key>
            <string>(?i)(?:^|(?&lt;=[&amp;,\(]))\s*([a-z]\w*)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>variable.parameter.fortran</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>procedure-call-dummy-variable</key>
      <dict>
        <key>name</key>
        <string>variable.parameter.dummy-variable.fortran</string>
        <key>match</key>
        <string>(?i)\b([a-z]\w*)(?=\s*\=)</string>
      </dict>
      <key>parentheses</key>
      <dict>
        <key>begin</key>
        <string>(?i)\s*\(</string>
        <key>end</key>
        <string>(?:\)|(?=[;!\n]))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>$self</string>
          </dict>
        </array>
      </dict>
    </dict>
  </dict>
</plist>